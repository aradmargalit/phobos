// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "server/internal/models"

	responsetypes "server/internal/responsetypes"
)

// PhobosAPI is an autogenerated mock type for the PhobosAPI type
type PhobosAPI struct {
	mock.Mock
}

// AddActivity provides a mock function with given fields: _a0, _a1
func (_m *PhobosAPI) AddActivity(_a0 *models.Activity, _a1 int) (*models.Activity, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Activity
	if rf, ok := ret.Get(0).(func(*models.Activity, int) *models.Activity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Activity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Activity, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddQuickAdd provides a mock function with given fields: _a0, _a1
func (_m *PhobosAPI) AddQuickAdd(_a0 int, _a1 *models.QuickAdd) (*models.QuickAdd, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.QuickAdd
	if rf, ok := ret.Get(0).(func(int, *models.QuickAdd) *models.QuickAdd); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.QuickAdd)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *models.QuickAdd) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActivity provides a mock function with given fields: activityID, uid
func (_m *PhobosAPI) DeleteActivity(activityID int, uid int) error {
	ret := _m.Called(activityID, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(activityID, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuickAdd provides a mock function with given fields: uid, quickAddID
func (_m *PhobosAPI) DeleteQuickAdd(uid int, quickAddID int) error {
	ret := _m.Called(uid, quickAddID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(uid, quickAddID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivities provides a mock function with given fields: uid
func (_m *PhobosAPI) GetActivities(uid int) (*[]models.ActivityResponse, error) {
	ret := _m.Called(uid)

	var r0 *[]models.ActivityResponse
	if rf, ok := ret.Get(0).(func(int) *[]models.ActivityResponse); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.ActivityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityTypes provides a mock function with given fields:
func (_m *PhobosAPI) GetActivityTypes() (*[]models.ActivityType, error) {
	ret := _m.Called()

	var r0 *[]models.ActivityType
	if rf, ok := ret.Get(0).(func() *[]models.ActivityType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.ActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUser provides a mock function with given fields: _a0
func (_m *PhobosAPI) GetCurrentUser(_a0 *gin.Context) responsetypes.User {
	ret := _m.Called(_a0)

	var r0 responsetypes.User
	if rf, ok := ret.Get(0).(func(*gin.Context) responsetypes.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(responsetypes.User)
	}

	return r0
}

// GetIntervalSummary provides a mock function with given fields: uid, interval, offset
func (_m *PhobosAPI) GetIntervalSummary(uid int, interval string, offset int) (*[]responsetypes.IntervalSum, error) {
	ret := _m.Called(uid, interval, offset)

	var r0 *[]responsetypes.IntervalSum
	if rf, ok := ret.Get(0).(func(int, string, int) *[]responsetypes.IntervalSum); ok {
		r0 = rf(uid, interval, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]responsetypes.IntervalSum)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, int) error); ok {
		r1 = rf(uid, interval, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuickAdds provides a mock function with given fields: uid
func (_m *PhobosAPI) GetQuickAdds(uid int) (*[]models.QuickAdd, error) {
	ret := _m.Called(uid)

	var r0 *[]models.QuickAdd
	if rf, ok := ret.Get(0).(func(int) *[]models.QuickAdd); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.QuickAdd)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStatistics provides a mock function with given fields: uid, offset
func (_m *PhobosAPI) GetUserStatistics(uid int, offset int) (*responsetypes.Stats, error) {
	ret := _m.Called(uid, offset)

	var r0 *responsetypes.Stats
	if rf, ok := ret.Get(0).(func(int, int) *responsetypes.Stats); ok {
		r0 = rf(uid, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responsetypes.Stats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(uid, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleCallback provides a mock function with given fields: _a0
func (_m *PhobosAPI) HandleCallback(_a0 *gin.Context) {
	_m.Called(_a0)
}

// HandleLogin provides a mock function with given fields: _a0
func (_m *PhobosAPI) HandleLogin(_a0 *gin.Context) {
	_m.Called(_a0)
}

// HandleStravaCallback provides a mock function with given fields: c
func (_m *PhobosAPI) HandleStravaCallback(c *gin.Context) {
	_m.Called(c)
}

// HandleStravaDeauthorization provides a mock function with given fields: uid
func (_m *PhobosAPI) HandleStravaDeauthorization(uid int) error {
	ret := _m.Called(uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleStravaLogin provides a mock function with given fields: c
func (_m *PhobosAPI) HandleStravaLogin(c *gin.Context) {
	_m.Called(c)
}

// HandleStravaWebhookVerification provides a mock function with given fields: c
func (_m *PhobosAPI) HandleStravaWebhookVerification(c *gin.Context) {
	_m.Called(c)
}

// HandleWebhookEvent provides a mock function with given fields: event
func (_m *PhobosAPI) HandleWebhookEvent(event models.StravaWebhookEvent) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.StravaWebhookEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields: _a0
func (_m *PhobosAPI) Logout(_a0 *gin.Context) {
	_m.Called(_a0)
}

// SeedActivityTypes provides a mock function with given fields:
func (_m *PhobosAPI) SeedActivityTypes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActivity provides a mock function with given fields: _a0
func (_m *PhobosAPI) UpdateActivity(_a0 *models.Activity) (*models.Activity, error) {
	ret := _m.Called(_a0)

	var r0 *models.Activity
	if rf, ok := ret.Get(0).(func(*models.Activity) *models.Activity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Activity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Activity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
